{
  "_args": [
    [
      {
        "raw": "fastparse@^1.1.1",
        "scope": null,
        "escapedName": "fastparse",
        "name": "fastparse",
        "rawSpec": "^1.1.1",
        "spec": ">=1.1.1 <2.0.0",
        "type": "range"
      },
      "D:\\webStorm\\project2\\node_modules\\css-selector-tokenizer"
    ]
  ],
  "_cnpm_publish_time": 1540910138125,
  "_from": "fastparse@^1.1.1",
  "_hasShrinkwrap": false,
  "_id": "fastparse@1.1.2",
  "_location": "/fastparse",
  "_nodeVersion": "8.11.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/fastparse_1.1.2_1540910137975_0.2013736910957893"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fastparse@^1.1.1",
    "scope": null,
    "escapedName": "fastparse",
    "name": "fastparse",
    "rawSpec": "^1.1.1",
    "spec": ">=1.1.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/css-selector-tokenizer"
  ],
  "_resolved": "http://registry.npm.taobao.org/fastparse/download/fastparse-1.1.2.tgz",
  "_shasum": "91728c5a5942eced8531283c79441ee4122c35a9",
  "_shrinkwrap": null,
  "_spec": "fastparse@^1.1.1",
  "_where": "D:\\webStorm\\project2\\node_modules\\css-selector-tokenizer",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/fastparse/issues"
  },
  "dependencies": {},
  "description": "A very simple and stupid parser, based on a statemachine and regular expressions.",
  "devDependencies": {
    "coveralls": "^2.11.2",
    "eslint": "^0.21.2",
    "istanbul": "^0.3.14",
    "mocha": "^2.2.5",
    "should": "^6.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "91728c5a5942eced8531283c79441ee4122c35a9",
    "size": 3392,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/fastparse/download/fastparse-1.1.2.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "85d8fa8a49e0a4a08cf884ec854f0d834cab817a",
  "homepage": "https://github.com/webpack/fastparse",
  "keywords": [
    "parser",
    "regexp"
  ],
  "license": "MIT",
  "main": "lib/Parser.js",
  "maintainers": [
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    }
  ],
  "name": "fastparse",
  "optionalDependencies": {},
  "publish_time": 1540910138125,
  "readme": "# fastparse\n\nA very simple and stupid parser, based on a statemachine and regular expressions.\n\nIt's not intended for complex languages. It's intended to easily write a simple parser for a simple language.\n\n\n\n## Usage\n\nPass a description of statemachine to the constructor. The description must be in this form:\n\n``` javascript\nnew Parser(description)\n\ndescription is {\n\t// The key is the name of the state\n\t// The value is an object containing possible transitions\n\t\"state-name\": {\n\t\t// The key is a regular expression\n\t\t// If the regular expression matches the transition is executed\n\t\t// The value can be \"true\", a other state name or a function\n\n\t\t\"a\": true,\n\t\t// true will make the parser stay in the current state\n\t\t\n\t\t\"b\": \"other-state-name\",\n\t\t// a string will make the parser transit to a new state\n\t\t\n\t\t\"[cde]\": function(match, index, matchLength) {\n\t\t\t// \"match\" will be the matched string\n\t\t\t// \"index\" will be the position in the complete string\n\t\t\t// \"matchLength\" will be \"match.length\"\n\t\t\t\n\t\t\t// \"this\" will be the \"context\" passed to the \"parse\" method\"\n\t\t\t\n\t\t\t// A new state name (string) can be returned\n\t\t\treturn \"other-state-name\";\n\t\t},\n\t\t\n\t\t\"([0-9]+)(\\\\.[0-9]+)?\": function(match, first, second, index, matchLength) {\n\t\t\t// groups can be used in the regular expression\n\t\t\t// they will match to arguments \"first\", \"second\"\n\t\t},\n\t\t\n\t\t// the parser stops when it cannot match the string anymore\n\t\t\n\t\t// order of keys is the order in which regular expressions are matched\n\t\t// if the javascript runtime preserves the order of keys in an object\n\t\t// (this is not standardized, but it's a de-facto standard)\n\t}\n}\n```\n\nThe statemachine is compiled down to a single regular expression per state. So basically the parsing work is delegated to the (native) regular expression logic of the javascript runtime.\n\n\n``` javascript\nParser.prototype.parse(initialState: String, parsedString: String, context: Object)\n```\n\n`initialState`: state where the parser starts to parse.\n\n`parsedString`: the string which should be parsed.\n\n`context`: an object which can be used to save state and results. Available as `this` in transition functions.\n\nreturns `context`\n\n\n\n\n## Example\n\n``` javascript\nvar Parser = require(\"fastparse\");\n\n// A simple parser that extracts @licence ... from comments in a JS file\nvar parser = new Parser({\n\t// The \"source\" state\n\t\"source\": {\n\t\t// matches comment start\n\t\t\"/\\\\*\": \"comment\",\n\t\t\"//\": \"linecomment\",\n\t\t\n\t\t// this would be necessary for a complex language like JS\n\t\t// but omitted here for simplicity\n\t\t// \"\\\"\": \"string1\",\n\t\t// \"\\'\": \"string2\",\n\t\t// \"\\/\": \"regexp\"\n\t\t\n\t},\n\t// The \"comment\" state\n\t\"comment\": {\n\t\t\"\\\\*/\": \"source\",\n\t\t\"@licen[cs]e\\\\s((?:[^*\\n]|\\\\*+[^*/\\n])*)\": function(match, licenseText) {\n\t\t\tthis.licences.push(licenseText.trim());\n\t\t}\n\t},\n\t// The \"linecomment\" state\n\t\"linecomment\": {\n\t\t\"\\n\": \"source\",\n\t\t\"@licen[cs]e\\\\s(.*)\": function(match, licenseText) {\n\t\t\tthis.licences.push(licenseText.trim());\n\t\t}\n\t}\n});\n\nvar licences = parser.parse(\"source\", sourceCode, { licences: [] }).licences;\n\nconsole.log(licences);\n```\n\n\n\n## License\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack/fastparse.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint lib",
    "precover": "npm run lint",
    "pretest": "npm run lint",
    "publish-patch": "mocha && npm version patch && git push && git push --tags && npm publish",
    "test": "mocha",
    "travis": "npm run cover -- --report lcovonly"
  },
  "version": "1.1.2"
}
